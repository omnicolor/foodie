{
    "name": "omnicolor/foodie",
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true,
            "captainhook/captainhook-phar": true,
            "captainhook/hook-installer": true
        }
    },
    "description": "A Slack bot that allows randomly choosing a food truck for lunch.",
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "keywords": ["slack", "food truck"],
    "license": "MIT",
    "minimum-stability": "stable",
    "prefer-stable": true,
    "require": {
        "php": "^8.2",
        "laravel/framework": "^11.0",
        "laravel/tinker": "^2.9",
        "matanyadaev/laravel-eloquent-spatial": "^4.2"
    },
    "require-dev": {
        "brianium/paratest": "^7.4",
        "captainhook/captainhook-phar": "^5.23",
        "captainhook/hook-installer": "^1.0",
        "fakerphp/faker": "^1.23",
        "friendsofphp/php-cs-fixer": "^3.56",
        "larastan/larastan": "^2.9",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.26",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.1",
        "php-parallel-lint/php-parallel-lint": "^1.4",
        "phpstan/phpstan": "^1.11",
        "phpstan/phpstan-strict-rules": "^1.6",
        "phpunit/phpunit": "^10.5",
        "psalm/plugin-laravel": "^2.11",
        "roave/security-advisories": "dev-master",
        "spatie/laravel-ignition": "^2.4",
        "vimeo/psalm": "^5.24"
    },
    "scripts": {
        "all": [
            "@lint",
            "@php-cs-fixer",
            "@coverage",
            "@phpstan",
            "@psalm"
        ],
        "coverage": [
            "XDEBUG_MODE=coverage ./artisan test --parallel --recreate-databases --coverage-html=public/coverage-report"
        ],
        "lint": "parallel-lint --colors app config database routes tests",
        "php-cs-fixer": "php-cs-fixer fix --dry-run --config=php-cs-fixer.php -v --diff",
        "phpstan": [
            "Composer\\Config::disableProcessTimeout",
            "phpstan analyze"
        ],
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ],
        "psalm": "psalm",
        "static": [
            "@lint",
            "@phpstan",
            "@psalm"
        ],
        "style": [
            "@php-cs-fixer"
        ],
        "test": "./artisan test --parallel --recreate-databases"
    },
    "scripts-descriptions": {
        "all": "Run all unit/feature tests with code coverage, then static analysis",
        "coverage": "Run all unit/feature tests and create a code coverage report in public/coverage",
        "lint": "Run lint across the code base to make sure it's syntactically valid",
        "php-cs-fixer": "Run php-cs-fixer",
        "phpstan": "Run PHPstan",
        "psalm": "Run Psalm",
        "static": "Run static analysis (Lint, PHPStan, and Psalm)",
        "style": "Run all style checks (php-cs-fixer)",
        "test": "Run all unit/feature tests"
    },
    "type": "project"
}
